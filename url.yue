--[[
    MIT License

    Copyright (c) 2024 Pika Software

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
--]]
import type, tostring, tonumber from _G
import byte, char, sub, gsub, match from string
import concat from table
import Error, TypeError from include "error.lua"

export class RangeError extends Error

CERTAINLY_NOT_NESTED = false
MIGHT_BE_NESTED = true

SPACE = 0x20 -- [space]
SCOLON = 0x3B -- ;
COMMA = 0x2C -- ,
EQUALS = 0x3D -- =
QUOTE = 0x22 -- "
PCT = 0x25 -- %
LEFT = 0x5B -- [
RIGHT = 0x5D -- ]
AMP = 0x26 -- &
PLUS = 0x2B -- +
INT_START = 0x30 -- 0
INT_END = 0x39 -- 10

-- Lookup table for decoding percent-encoded characters and encoding special characters
-- Using HEX_TABLE will result in a double speedup compared to using functions
HEX_TABLE = []
for i = 0x00, 0xFF
    hex = bit.tohex(i, 2)
    HEX_TABLE[hex] = char(i)
    HEX_TABLE[hex\upper!] = char(i)
    HEX_TABLE[char(i)] = "%" .. hex\upper!
-- Special characters
HEX_TABLE["\r\n"] = "\n"
HEX_TABLE[" "] = "+"
HEX_TABLE["-"] = "-"
HEX_TABLE["."] = "."
HEX_TABLE["_"] = "_"
HEX_TABLE["~"] = "~"
HEX_TABLE["!"] = "!"
HEX_TABLE["*"] = "*"
HEX_TABLE["'"] = "'"
HEX_TABLE["("] = "("
HEX_TABLE[")"] = ")"

export decodeURI = (s) -> 
    s = gsub(s, "%%(%x%x)", HEX_TABLE) |> gsub("+", " ")
    return s

export encodeURI = (s) ->
    s = gsub(s, "%W", HEX_TABLE)
    return s

-- https://github.com/petkaantonov/querystringparser
export class QueryStringParser
    maxLength: 32768
    maxDepth: 4
    maxKeys: 256

    parse: (str) =>
        @containsSparse = false
        @cacheKey = ""
        @cacheVal = nil

        if type(str) == "string"
            if #str > @maxLength
                error RangeError("str is too large (QueryStringParser.maxLength=#{@maxLength})")
            
            return @parseString(str, false)
        else if type(str) == "table"
            error Error "not implemented"
        return {}

    stringify: (obj) =>
        if type(obj) != "table"
            error TypeError "obj must be a table"

        keyPrefix = ""
        cur = obj
        key = nil
        value = nil
        isArray = false -- please do not pass array as first argument :)
        stack = []
        stackLen = 0
        ret = []

        -- spooky spooky while true loop :)
        while true
            if isArray
                key += 1
                value = cur[key]
                if not value
                    key = nil
            else
                key, value = next(cur, key)

            if key != nil
                serializedKey = encodeURI( isArray and tostring(key - 1) or tostring(key) )
                if type(value) == "table"
                    stack[stackLen + 1] = keyPrefix
                    stack[stackLen + 2] = cur
                    stack[stackLen + 3] = key
                    stack[stackLen + 4] = isArray
                    stackLen += 4

                    keyPrefix = keyPrefix == "" and serializedKey or keyPrefix .. "[" .. serializedKey .. "]"
                    isArray = value[1] and true or false -- usually this is enough to determine if table is an array
                    key = isArray and 0 or nil
                    cur = value
                else
                    serializedKey = keyPrefix == "" and serializedKey or keyPrefix .. "[" .. serializedKey .. "]"
                    ret[] = serializedKey .. "=" .. encodeURI(value)
            else if stackLen != 0
                keyPrefix = stack[stackLen - 3]
                cur = stack[stackLen - 2]
                key = stack[stackLen - 1]
                isArray = stack[stackLen]
                stackLen -= 4
            else
                break

        return concat(ret, "&")


    decode: (str, shouldDecode, containsPlus) =>
        if not shouldDecode
            return str
        if containsPlus
            str = gsub(str, "%+", " ")
        return decodeURI(str)

    maybeArrayIndex: (str, arrayLength) =>
        len = #str
        -- Empty string I.E. direct brackets [] means index will be .length
        if len == 0
            return arrayLength
        
        ch = byte(str, 1)

        -- "0" is only valid index if it's the only character in the string
        -- "00", "001", are not valid array indices
        if ch == INT_START
            return len > 1 and -1 or 1
        else if INT_START <= ch and ch <= INT_END
            -- Single digit number 1-9
            if len == 1
                return ch - INT_START + 1
            else if match(str, "^%d+$")
                return tonumber(str) + 1
        return -1

    getSlot: (dictonary, prevKey, curKey) =>
        if not dictonary[prevKey]
            dictonary[prevKey] = {}
        return dictonary[prevKey]

    placeNestedValue: (dictonary, key, value, i, prevKey, curKey) =>
        slot = @getSlot(dictonary, prevKey, curKey)
        index = @maybeArrayIndex(curKey, #slot)

        len = #key
        depth = 2
        maxDepth = @maxDepth
        start = -1
        while (i <= len)
            ch = byte(key, i)
            if ch == LEFT
                start = i + 1
            else if ch == RIGHT and start != -1
                prevKey = curKey
                curKey = start == i and "" or sub(key, start, i - 1)
                start = -1
                depth += 1
                if depth > maxDepth
                    error RangeError("too deep (QueryStringParser.maxDepth=#{maxDepth})")
                slot = @getSlot(slot, prevKey, curKey)
                index = @maybeArrayIndex(curKey, #slot)
            i += 1

        if index != -1
            if value != ""
                if index == (#slot + 1)
                    slot[] = value
                else
                    @containsSparse = true
                    slot[index] = value
        else
            @insert(slot, curKey, value)

    insert: (dictonary, key, value) =>
        if prev := dictonary[key]
            if type(prev) == "table"
                prev[] = value
                return prev
            else
                new = [prev, value]
                dictonary[key] = new
                return new
        else
            dictonary[key] = value

    push: (dictonary, key, value) =>
        if prev := dictonary[key]
            prev[] = value
            return prev
        new = {value}
        dictonary[key] = new
        return new

    maybePlaceNestedValue: (dictonary, key, value) =>
        len = #key
        if byte(key, len) != RIGHT
            @placeValue(dictonary, key, value, CERTAINLY_NOT_NESTED)
            return 

        start = -1
        i = 1
        curKey = nil
        prevKey = nil

        while i <= len
            ch = byte(key, i)
            if ch == LEFT
                start = i + 1
                prevKey = sub(key, 1, i - 1)
            else if ch == RIGHT
                if start == -1
                    @placeValue(dictonary, key, value, CERTAINLY_NOT_NESTED)
                    return
                curKey = start == i and "" or sub(key, start, i - 1)
                i += 1
                break
            i += 1

        if curKey == nil
            @placeValue(dictonary, key, value, CERTAINLY_NOT_NESTED)
            return

        if curKey == "" and value != "" and i == len
            if key == @cacheKey
                @cacheValue[] = value
            else
                @cacheKey = key
                @cacheValue = @push(dictonary, prevKey, value)
        else
            @placeNestedValue(dictonary, key, value, i, prevKey, curKey)

    placeValue: (dictonary, key, value, possiblyNested) =>
        if possiblyNested == MIGHT_BE_NESTED
            @maybePlaceNestedValue(dictonary, key, value)
            return
        if key == @cacheKey
            @cacheValue[] = value
            return
        if cache := @insert(dictonary, key, value)
            @cacheKey = key
            @cacheValue = cache

    compact: (obj) =>
        if type(obj) != "table"
            return obj
    
        if obj[1] -- probably an array
            ret = []
            for _, v in pairs obj
                ret[] = v
            return ret
        else
            for k, v in pairs obj
                obj[k] = @compact(v)
            return obj


    parseString: (str, noDecode) =>
        keys = 0
        decodeKey = false
        decodeValue = false
        possiblyNested = CERTAINLY_NOT_NESTED
        len = #str
        i = 1
        dictonary = {}
        keyStart = 1
        keyEnd = 1
        valueStart = 1
        valueEnd = 1
        left = 0
        containsPlus = false

        while i <= len
            ch = byte(str, i)

            if ch == LEFT
                left += 1
            else if left > 0 and ch == RIGHT
                possiblyNested = MIGHT_BE_NESTED
                left -= 1
            else if left == 0 and ch == EQUALS
                keyEnd = i - 1
                valueEnd = valueStart = i + 1
                key = sub(str, keyStart, keyEnd)
                key = @decode(key, decodeKey, containsPlus)
                decodeKey = false

                for j = valueStart, len
                    ch = byte(str, j)

                    if (ch == PLUS or ch == PCT) and not noDecode
                        if (ch == PLUS) then containsPlus = true
                        decodeValue = true
                    if ch == AMP or j == len
                        valueEnd = j
                        i = j
                        if ch == AMP
                            valueEnd -= 1

                        value = sub(str, valueStart, valueEnd)
                        value = @decode(value, decodeValue, containsPlus)

                        -- Place value
                        @placeValue(dictonary, key, value, possiblyNested)

                        containsPlus = decodeValue = false
                        possiblyNested = CERTAINLY_NOT_NESTED

                        keyStart = j + 1
                        keys += 1
                        if (keys > @maxKeys)
                            error RangeError("too many keys (QueryStringParser.maxKeys=#{@maxKeys})")
                        break
            else if (ch == PLUS or ch == PCT) and not noDecode
                if ch == PLUS then containsPlus = true
                decodeKey = true
            i += 1

        if keyStart < len
            key = sub(str, keyStart, len)
            key = @decode(key, decodeKey, containsPlus)
            @placeValue(dictonary, key, "", possiblyNested)

        if @containsSparse
            -- original developer once said 
            -- This behavior is pretty stupid but what you gonna do
            @compact(dictonary)

        return dictonary
